JUP创建微服务
数据模型   表
数据码表


自动生成代码  cat4j
前后端分离
对外发布JUP的接口


注册中心

创建分布式工程
boot和base
boot中有对应的配置文件


api
service
不需要@RequestMapping,在controller中去除


以上全是order工程




新建user工程
user调oorder
在user的工程中引入order的包,pom中加
在配置中配置对order的调用,配置扫描



JUP调用的的有点
可以用springcloud的http
也可以用doubble的调用方式

在user中可以用@RequestMapping

postMan工具


ide是jup,不可以用idea吗


之前的中汇的健康检查和服务治理还有配置中都是微服务的东西
traceId就是服务治理,日志监控中的东西

异常组件
BusinessException和ServiceException的区别,前段的返回信息不同200和500,都会回滚

日志模块(sleuth,日志追踪)
链路日志traceId和应用日志,日志支持压缩   Trace.log和Applicaton.log


数据模块
BaseDao
多数据源支持
第二个数据源使用@Resource
分布式事务就无法使用多数据源配置

缓存组件
guava  例如ehcache  hashMap
redis  本地缓存和redis(二级缓存)   缓存同步

pom引入依赖,application.yml配置
增加超时配置



验证码组件
字母数字,图形,计算验证码,滑块等
pom引入,application.yml配置


序列号组件
UUID和雪花算法生成序列号
UUID:根据每个机器
snow flake:默认是16位,采用了红黑树数据结构,推荐
时间压缩产生的序列号



数据字典
码表(静态,动态),数据标准,数据字典
新建静态码表和数据标准
配置,@Dict和@Valitaid



安全框架
网关安全,http协议,httphead
加pom依赖 
application_security.yml
XSS防御
Cookie安全设置
http Header参数校验,避免被恶意重定向
Sql注入
上传文件特征值
防重复提交 redis的分布式锁来实现(防止同一个用户的重复操作)


异步处理
springboot的@Async实现异步线程调用
@EnableAsync




注册中心,集中配置,服务治理,服务监控,服务发布










































































